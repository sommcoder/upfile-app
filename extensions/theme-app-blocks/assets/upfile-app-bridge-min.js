var E=Object.defineProperty;var y=o=>{throw TypeError(o)};var F=(o,e,t)=>e in o?E(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t;var s=(o,e,t)=>F(o,typeof e!="symbol"?e+"":e,t),z=(o,e,t)=>e.has(o)||y("Cannot "+t);var p=(o,e,t)=>(z(o,e,"read from private field"),t?t.call(o):e.get(o)),w=(o,e,t)=>e.has(o)?y("Cannot add the same private member more than once"):e instanceof WeakSet?e.add(o):e.set(o,t),S=(o,e,t,i)=>(z(o,e,"write to private field"),i?i.call(o,t):e.set(o,t),t);function _(){console.log("upfile initUpfile() called"),new T,console.log("Upfile created and mounted"),console.log("self.upfile:",self.upfile),self.dispatchEvent(new CustomEvent("upfile:loaded"))}self.addEventListener("DOMContentLoaded",_);self.addEventListener("shopify:section:load",_);console.log("1000");var f,m,h;class T{constructor(){w(this,f);w(this,m,"apps/dropzone");w(this,h,null);s(this,"settings",{maxFileSize:null,maxWidgetCount:null,maxRequestSize:null,subscriptionPlan:null,forbiddenFileTypes:[".js",".exe",".bat",".sh",".php",".html",".bin"],appBridgeEnabled:null,upfileWidgets:[]});s(this,"store",self.location.origin);s(this,"hiddenInput",null);s(this,"errorMessages",[]);s(this,"fileNameSet",new Set);s(this,"fileViewerUIMap",new Map);s(this,"fileStateObj",{});s(this,"totalStateFileSize",0);s(this,"formData",new FormData);s(this,"cart",null);s(this,"cartId",null);if(self.upfile=this,this.store.includes("myshopify.com"))console.log("this.store:",this.store),S(this,f,`${this.store}/${p(this,m)}`),console.log("this.#SHOPIFY_APP_PROXY_URL:",p(this,f));else throw console.error("%c⚠️ UPFILE ERROR: Origin does not contain 'myshopify'!","background: red; color: white; font-weight: bold; padding: 4px 8px; border-radius: 4px;"),new Error("UPFILE ERROR: Origin does not contain 'myshopify'");if(this.getMerchantSettings(),this.getCart(),self.upfile.settings.blockExtensionEnabled!==!1)if(!self.location.pathname.includes("/products/")&&!self.location.pathname.includes("/cart")){console.error("Upfile: current path is NOT on a /products or /cart route");return}else self.location.pathname.includes("/products/"),this.initializeAppBridgeEvents(),self.dispatchEvent(new CustomEvent("upfile:loaded"))}injectShadowRoot(){}injectStylesheet(){}async getCart(){try{const e=await fetch(`${this.store}/cart.js`);if(console.log("res:",e),!e.ok)throw new Error("Failed to fetch cart");const t=await e.json();console.log("data:",t),self.upfile.cart=t.cart}catch(e){return console.error("getCart() Error getting cart via storefront GQL API:",e),null}}async updateCartMetaField(){try{await fetch(`${this.store}/file`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:lineItemKey,quantity:currentQuantity,properties:{__upfile_id:yourFileId}})})}catch(e){e instanceof Error?console.log("updateCart msg:",e.message):console.log("updateCart error:",e)}}async getMerchantSettings(){try{const e=await fetch(`${p(this,f)}/merchant`);if(!e.ok)throw new Error("Failed to fetch merchant settings");const t=await e.json();console.log("data:",t),self.upfile.settings={...t.settings},S(self.upfile,h,t.accessToken),console.log("self.upfile.#ACCESS_TOKEN:",p(self.upfile,h))}catch(e){return console.error("Could not get merchant settings:",e),null}}async addToCart(e,t,i=1){try{const r=await fetch(`${p(this,f)}/cart`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({operation:"addToCart",input:{cartId:e,lines:[{merchandiseId:t,quantity:i}]}})});if(!r.ok)throw new Error(`Failed to add to cart: ${r.status}`);const l=await r.json();return console.log("Add to cart response:",l),l}catch(r){return console.error("addToCart() error:",r),null}}async updateCart(e,t,i){try{const r=await fetch(`${p(this,f)}/cart`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({operation:"updateCart",input:{cartId:e,lines:[{id:t,quantity:i}]}})});if(!r.ok)throw new Error(`Failed to update cart: ${r.status}`);const l=await r.json();return console.log("Update cart response:",l),l}catch(r){return console.error("updateCart() error:",r),null}}async postFiles(e){try{const t=await fetch(`${p(this,f)}/file`,{method:"POST",redirect:"manual",body:e,headers:{"Content-Length":self.upfile.totalStateFileSize.toString()}});if(!t.ok){const i=await t.text();throw new Error(`Upload failed (${t.status}): ${i}`)}return await t.json()}catch(t){return console.error("postFiles():",t),{data:null,error:t.message}}}async deleteFiles(e){try{const t=await fetch(`${p(this,f)}/file`,{method:"DELETE",redirect:"manual",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok){const r=await t.text();throw new Error(`Delete failed (${t.status}): ${r}`)}const i=await t.json();return i.length>0&&console.warn("Some files failed to delete:",i),{failed:i}}catch(t){return console.error("deleteFiles():",t),{failed:[],error:t.message}}}addFileState(e,t){self.upfile.fileStateObj[e]={id:e,name:t.name,size:t.size,type:t.type,status:null},self.upfile.fileNameSet.add(t.name),self.upfile.totalStateFileSize+=t.size}updateFileStatus(e,t){var l;if(!Object.hasOwn(self.upfile.fileStateObj,e))return console.error(`File with id: ${e} does not exist in state`),!1;const i=t==="fulfilled"||t==="success"?"success":"failed";self.upfile.fileStateObj[e].status=i;const r=(l=self.upfile.fileViewerUIMap.get(e))==null?void 0:l.querySelector("[data-status]");return r&&(r.textContent=i,r.dataset.status=i),!0}deleteFileState(e){const t=self.upfile.fileStateObj[e];self.upfile.totalStateFileSize-=t.size,self.upfile.fileNameSet.delete(t.name),delete self.upfile.fileStateObj[e],self.upfile.fileViewerUIMap.delete(e)}deleteVariantProps(e){if(this.hiddenInput){const t=this.hiddenInput.value.split(",").filter(i=>i!==e).join(",");this.hiddenInput.value=t}}validateSubmittedFile(e){return self.upfile.errorMessages=[],Object.hasOwn(self.upfile.settings.permittedFileTypes||{},e.type)||this.errorMessages.push(`'${e.name}' is an invalid file type: (${e.type})`),self.upfile.settings.maxFileSize!==null&&self.upfile.settings.maxRequestSize&&(e.size>self.upfile.settings.maxFileSize&&this.errorMessages.push(`'${e.name}' exceeds the max size by: ${this.formatToByteStr(e.size-self.upfile.settings.maxFileSize)}`),this.fileNameSet.has(e.name)&&this.errorMessages.push(`'${e.name}' is a DUPLICATE file name`),this.totalStateFileSize+e.size>self.upfile.settings.maxRequestSize&&self.upfile.errorMessages.push(`'${e.name}' exceeds combined permitted size`)),self.upfile.errorMessages.length===0}validateDraggedFile(e){return self.upfile.settings.permittedFileTypes?Object.hasOwn(self.upfile.settings.permittedFileTypes,e.type):!1}formatToByteStr(e){let t=e;const i=["B","KB","MB","GB"];let r=0;for(;t>=1024&&r<i.length-1;)t/=1024,r++;return`${t.toFixed(2)} ${i[r]}`}initializeAppBridgeEvents(){document.addEventListener("cart:updated",e=>{console.log("ev:",e)})}}f=new WeakMap,m=new WeakMap,h=new WeakMap;class V{constructor(){s(this,"dropzoneBlock",null);s(this,"fileViewerBlock",null);s(this,"hiddenInput",null);s(this,"productForm",null);s(this,"cartRoot",null);s(this,"dropzoneFileInput",null);s(this,"dropzoneHelpText",null);s(this,"dropzoneText",null);s(this,"dropzoneSelectBtn",null);s(this,"dropzoneFileSizeTally",null);s(this,"dropzoneFileSizeMax",null);s(this,"fileViewerList",null);s(this,"fileViewerOriginalRow",null);s(this,"fileViewerTrashIcon",null);s(this,"fileViewerStatus",null);s(this,"loadingSpinner",null);s(this,"fileViewerPlaceholder",null);s(this,"fileViewerErrorList",null);s(this,"fileViewerErrorItem",null);var e,t,i,r;if(console.log("app block constructing..."),console.log("self.upfile.settings.cartInjectionRootSelector:",self.upfile.settings.cartInjectionRootSelector),self.upfile.cart?this.cartRoot=document.querySelector(self.upfile.settings.cartInjectionRootSelector||'[id*="cart" i]'):this.productForm=document.querySelector('[data-type="add-to-cart-form"]')||document.querySelector('form[action*="/cart/add"]')||document.querySelector('form[action^="/cart"]')||null,this.dropzoneBlock=document.querySelector("#upfile__dropzone"),this.fileViewerBlock=document.getElementById("upfile__fileviewer"),this.dropzoneBlock&&this.fileViewerBlock&&this.productForm){if(this.dropzoneFileInput=this.dropzoneBlock.querySelector("#upfile__dropzone_manual_file_input"),this.dropzoneHelpText=this.dropzoneBlock.querySelector("#upfile__dropzone_help_text"),this.dropzoneText=this.dropzoneBlock.querySelector("#upfile__dropzone_text"),console.log("this.dropzoneText:",this.dropzoneText),this.dropzoneSelectBtn=this.dropzoneBlock.querySelector("#upfile__dropzone_select_file_btn"),this.dropzoneFileSizeTally=this.dropzoneBlock.querySelector("#upfile__dropzone_file_size_tally"),this.dropzoneFileSizeMax=this.dropzoneBlock.querySelector("#upfile__dropzone_file_size_max"),this.fileViewerList=this.fileViewerBlock.querySelector("#upfile__fileviewer_item_list"),!this.fileViewerList)return;this.fileViewerOriginalRow=this.fileViewerList.querySelector(".upfile__fileviewer_item_row"),this.fileViewerTrashIcon=(e=this.fileViewerList)==null?void 0:e.querySelector(".upfile__fileviewer_trash_icon"),this.fileViewerStatus=this.fileViewerList.querySelector(".upfile__fileviewer_item_status"),this.loadingSpinner=this.fileViewerList.querySelector(".upfile__spinner"),this.fileViewerPlaceholder=this.fileViewerList.querySelector("#upfile__fileviewer_placeholder"),this.fileViewerErrorList=this.fileViewerBlock.querySelector("#upfile__fileviewer_error_list"),this.fileViewerErrorItem=this.fileViewerBlock.querySelector(".upfile__fileviewer_error_item"),this.initEventListeners(),this.isInAppBrowser()}else{const l=(t=this.dropzoneBlock)==null?void 0:t.querySelector("#upfile__dropzone_missing_block_notice");if(l instanceof HTMLElement){if(l.style.display="flex",!this.dropzoneBlock)return;const n=this.dropzoneBlock.firstElementChild;n instanceof HTMLElement&&(n.style.display="none")}const a=(i=this.fileViewerBlock)==null?void 0:i.querySelector("#upfile__dropzone_missing_block_notice");if(a instanceof HTMLElement){a.style.display="flex";const n=(r=this.fileViewerBlock)==null?void 0:r.firstElementChild;n instanceof HTMLElement&&(n.style.display="none")}}}insertAppBlock(e){e&&(console.log("element:",e),e.insertAdjacentHTML(self.upfile.settings.cartInjectionPosition||"beforeend",self.upfile.settings.customHTML||""))}isInAppBrowser(){const e=navigator.userAgent||navigator.vendor;return/FBAN|FBAV|Instagram|Line|Twitter|Snapchat|TikTok/i.test(e)}openInDefaultBrowser(){const e=window.location.href,t=window.open(e,"_blank");(!t||t.closed||typeof t.closed>"u")&&alert("Please open this page in your browser for the best experience.")}togglePlaceholderUI(){this.fileViewerPlaceholder&&(self.upfile.fileViewerUIMap.size===0?this.fileViewerPlaceholder.style.display="flex":self.upfile.fileViewerUIMap.size===1&&(this.fileViewerPlaceholder.style.display="none"))}addVariantProps(e){var t;this.productForm&&(this.hiddenInput=this.productForm.querySelector("input[name='properties[__upfile_id]']")),this.hiddenInput?this.hiddenInput.value+=`,${e}`:(this.hiddenInput=document.createElement("input"),this.hiddenInput.type="hidden",this.hiddenInput.name="properties[__upfile_id]",this.hiddenInput.value=e,(t=this.productForm)==null||t.appendChild(this.hiddenInput))}renderFileViewerItem(e){var a,n;let t=(a=this.fileViewerOriginalRow)==null?void 0:a.cloneNode(!0);if(console.log("START newRowEl:",t),!t||t===null)return;t.dataset.id=e.id;const i=t.querySelector("[data-name]");i&&(i.textContent=e.name);const r=t.querySelector("[data-size]");r&&(r.textContent=self.upfile.formatToByteStr(e.size));const l=t.querySelector("[data-trash]");l&&(l.dataset.id=e.id,l.addEventListener("click",d=>{const u=d.target.dataset.id;u&&this.handleFileDelete(u)})),console.log("END newRowEl:",t),(n=this.fileViewerList)==null||n.appendChild(t),t.style.display="grid",t.style.opacity="1",self.upfile.fileViewerUIMap.set(e.id,t),this.togglePlaceholderUI(),this.hideLoadingSpinner(e.id)}deleteFileViewerItem(e){if(!this.fileViewerList)return;const t=self.upfile.fileViewerUIMap.get(e);self.upfile.fileViewerUIMap.delete(e),this.fileViewerList.removeChild(t)}updateTallyElementText(){this.dropzoneFileSizeTally&&(this.dropzoneFileSizeTally.textContent=self.upfile.formatToByteStr(self.upfile.totalStateFileSize))}resetDragUI(){!this.dropzoneSelectBtn||!this.dropzoneBlock||!this.dropzoneText||(this.dropzoneSelectBtn.style.display="flex",this.dropzoneBlock.removeAttribute("data-status"),this.dropzoneBlock.removeAttribute("data-drag"),this.dropzoneText.style.display="none",this.dropzoneText.removeAttribute("data-status"))}hideLoadingSpinner(e){if(!this.fileViewerList)return;const t=this.fileViewerList.querySelector(`[data-id="${e}"]`);t&&(t.style.display="none")}renderLoadingSpinner(e){if(!this.loadingSpinner)return;const t=this.loadingSpinner.cloneNode(!0),i=e.parentNode,r=e.nextSibling;if(!(!i||!r))return e.remove(),i.insertBefore(t,r),function(){t.remove(),i.insertBefore(e,r)}}renderFileViewerSpinners(e,t){if(!this.fileViewerOriginalRow||!this.fileViewerList)return;const i=this.fileViewerOriginalRow.cloneNode(!0);i.id=e,i.classList.remove("hidden");const r=i.querySelector(".upfile__fileviewer_item_name"),l=i.querySelector(".upfile__fileviewer_item_status");r&&(r.textContent=self.upfile.fileStateObj[e].name),l&&(l.textContent="uploading...",l.setAttribute("data-status","uploading"));const a=i.querySelector(".upfile__fileviewer_trash_icon");a&&a.addEventListener("click",()=>{var n;(n=this.fileViewerList)==null||n.removeChild(i),self.upfile.deleteFileState(e),self.upfile.deleteVariantProps(e),this.togglePlaceholderUI(),this.updateSizeTallyUI()}),this.fileViewerList.insertBefore(i,this.fileViewerPlaceholder),self.upfile.fileViewerUIMap.set(e,i)}renderErrorMessages(e){!this.fileViewerErrorList||!this.fileViewerErrorItem||(this.fileViewerErrorList.innerHTML="",e.forEach(t=>{var r;if(!this.fileViewerErrorItem)return;const i=this.fileViewerErrorItem.cloneNode(!0);i.classList.remove("hidden"),i.textContent=t,(r=this.fileViewerErrorList)==null||r.appendChild(i)}),this.fileViewerErrorList.style.display="block")}updateSizeTallyUI(){this.dropzoneFileSizeTally&&(this.dropzoneFileSizeTally.textContent=self.upfile.formatToByteStr(self.upfile.totalStateFileSize))}resetErrorMessageList(){self.upfile.errorMessages=[],this.fileViewerErrorList&&(this.fileViewerErrorList.innerHTML="")}initEventListeners(){var e,t,i,r,l,a;(e=this.dropzoneBlock)==null||e.addEventListener("dragenter",this.handleDragEnter.bind(this)),(t=this.dropzoneBlock)==null||t.addEventListener("dragover",n=>{n.preventDefault()}),(i=this.dropzoneBlock)==null||i.addEventListener("dragleave",this.handleDragLeave.bind(this)),(r=this.dropzoneBlock)==null||r.addEventListener("drop",this.handleDrop.bind(this)),(l=this.dropzoneSelectBtn)==null||l.addEventListener("click",n=>{var d;n.preventDefault(),(d=this.dropzoneFileInput)==null||d.click()}),(a=this.dropzoneFileInput)==null||a.addEventListener("change",n=>{var u;const d=n.target,c=Array.from((u=d.files)!=null&&u.length?d.files:[]);this.prepareForPost(c),self.upfile.postFiles(self.upfile.formData)})}prepareForPost(e){this.resetErrorMessageList();const t=e.filter(i=>self.upfile.validateSubmittedFile(i));if(self.upfile.errorMessages.length>0||t.length===0)return self.upfile.errorMessages;Array.from(t).forEach((i,r)=>{if(!self.upfile.validateSubmittedFile(i)){this.renderErrorMessages(self.upfile.errorMessages);return}const l=crypto.randomUUID();self.upfile.addFileState(l,i),self.upfile.formData.append("file_uuid",l),self.upfile.formData.append("files",i),this.renderFileViewerSpinners(l,r)})}handleFileResponse(e,t){this.renderFileViewerItem(self.upfile.fileStateObj[e.id]),self.upfile.updateFileStatus(e.id,t)&&(this.addVariantProps(e.id),this.updateTallyElementText())}handleFileDelete(e){self.upfile.deleteVariantProps(e),this.deleteFileViewerItem(e),self.upfile.deleteFileState(e),this.updateTallyElementText(),self.upfile.errorMessages=[],this.togglePlaceholderUI(),self.upfile.deleteFiles([e])}handleDragEnter(e){var l,a,n,d,c;if(e.preventDefault(),(l=this.dropzoneBlock)==null||l.setAttribute("data-drag","dragging"),!this.dropzoneSelectBtn||!this.dropzoneText)return;this.dropzoneSelectBtn.style.display="none";const t=(a=e.dataTransfer)==null?void 0:a.items;if(!t)return;const i=t.length;let r="";for(const u of t){const g=self.upfile.validateDraggedFile(u);(n=this.dropzoneBlock)==null||n.setAttribute("data-status",g?"valid":"invalid"),(d=this.dropzoneText)==null||d.setAttribute("data-status",g?"valid":"invalid"),r=i>1?this.dropzoneText.dataset[g?"validTextPlural":"invalidTextPlural"]:this.dropzoneText.dataset[g?"validTextSingular":"invalidTextSingular"],this.dropzoneText.textContent=r,this.dropzoneText.style.display="flex",console.log("this.dropzoneText.textContent:",(c=this.dropzoneText)==null?void 0:c.textContent)}}handleDragLeave(e){e.preventDefault(),this.resetDragUI()}async handleDrop(e){var l;e.preventDefault(),e.stopPropagation(),this.resetDragUI();const t=(l=e.dataTransfer)==null?void 0:l.files;if(!t)return;this.prepareForPost(Array.from(t));const{data:i,error:r}=await self.upfile.postFiles(self.upfile.formData);if(r||!i){console.warn("Upload error:",r);return}i.forEach(({value:a,status:n})=>{this.handleFileResponse(a,n)})}}self.addEventListener("upfile:loaded",()=>{new V});
