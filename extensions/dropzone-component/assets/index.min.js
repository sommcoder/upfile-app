"use strict";
class FileUpload {
  constructor() {
    if (
      (console.log("25"),
      (this.productForm = document.querySelector(
        '[data-type="add-to-cart-form"]',
      )),
      (this.hiddenInput = null),
      (this.dropzoneForm = document.getElementById("upfile__dropzone-form")),
      (this.fileViewerWrapper = document.getElementById(
        "upfile__fileviewer--wrapper",
      )),
      this.dropzoneForm && this.fileViewerWrapper && this.productForm)
    )
      (this.dropzoneFileInput = this.dropzoneForm.querySelector(
        "#upfile__manual-file-input",
      )),
        (this.dropzoneSelectBtn = this.dropzoneForm.querySelector(
          "#upfile__select-file-btn",
        )),
        (this.dropzoneText = this.dropzoneForm.querySelector(
          "#upfile__dropzone-text",
        )),
        (this.fileViewerList = this.fileViewerWrapper.querySelector(
          "#upfile__fileviewer--item-list",
        )),
        (this.fileViewerOriginalRow = this.fileViewerList.querySelector(
          ".upfile__fileviewer--item-row",
        )),
        (this.fileViewerTrashIcon = this.fileViewerList.querySelector(
          ".upfile__fileviewer--trash-icon",
        )),
        (this.fileViewerStatus = this.fileViewerList.querySelector(
          ".upfile__fileviewer--item-status",
        )),
        (this.fileViewerPlaceholder = this.fileViewerList.querySelector(
          "#upfile__fileviewer--placeholder",
        )),
        (this.fileViewerErrorList = this.fileViewerWrapper.querySelector(
          "#upfile__fileviewer--error-list",
        )),
        (this.fileViewerErrorItem = this.fileViewerWrapper.querySelector(
          ".upfile__fileviewer--error-item",
        )),
        (this.fileNameSet = new Set()),
        (this.fileViewerUIMap = new Map()),
        (this.fileStateObj = {}),
        (this.errorMessages = []),
        (this.totalFileSize = 0),
        (this.VALID_FILE_TYPES = {}),
        (this.MAX_FILE_SIZE = 20971520),
        (this.MAX_REQUEST_SIZE = 62914560),
        (this.SHOPIFY_APP_PROXY_URL =
          this.dropzoneForm?.dataset.proxyUrl || ""),
        this.getMerchantSettings(),
        this.initEventListeners();
    else {
      const e = this.dropzoneForm?.querySelector(
        "#upfile__missing-block-notice",
      );
      e &&
        ((e.style.display = "flex"),
        console.log(
          " this.dropzoneForm.firstElementChild:",
          this.dropzoneForm.firstElementChild,
        ),
        (this.dropzoneForm.firstElementChild.style.display = "none"));
      const t = this.fileViewerWrapper?.querySelector(
        "#upfile__missing-block-notice",
      );
      t &&
        ((t.style.display = "flex"),
        (this.fileViewerWrapper.firstElementChild.style.display = "none"));
    }
  }
  addFileState(e, t) {
    console.log("file:", t),
      (this.fileStateObj[e] = {
        name: t.name,
        size: t.size,
        type: t.type,
        status: null,
      });
  }
  updateFileStatus(e, t) {
    this.fileStateObj[e] = { ...this.fileStateObj[e], status: t };
  }
  deleteFileState(e) {
    console.log("file state check:", this.fileStateObj), console.log("id:", e);
    const { [e]: t, ...r } = this.fileStateObj;
    (this.fileStateObj = r), console.log("File removed!", this.fileStateObj);
  }
  showErrorMessages() {
    this.errorMessages.forEach((e) => {
      const t = this.fileViewerErrorItem.cloneNode(!0);
      (t.style.display = "block"),
        (t.textContent = e),
        this.fileViewerErrorList.appendChild(t);
    });
  }
  validateFile(e) {
    return (
      console.log("file:", e),
      Object.hasOwn(this.VALID_FILE_TYPES, e.type) ||
        this.errorMessages.push(`${e.name}: Invalid type of: '${e.type}'`),
      e.size > this.MAX_FILE_SIZE &&
        this.errorMessages.push(
          `File: '${e.name}' is ${e.size - this.MAX_FILE_SIZE} too large`,
        ),
      this.fileNameSet.has(e.name) &&
        this.errorMessages.push(`${e.name} is a duplicate file name`),
      this.errorMessages.length > 0
        ? (this.showErrorMessages(), this.resetDragUIState(), !1)
        : !0
    );
  }
  getFileFormatString(e) {
    let t = e;
    const r = ["B", "KB", "MB", "GB"];
    let i = 0;
    for (; t >= 1024 && i < r.length - 1; ) (t /= 1024), i++;
    return `${t.toFixed(2)} ${r[i]}`;
  }
  togglePlaceholderUI() {
    this.fileViewerUIMap.size === 0 &&
      (this.fileViewerPlaceholder.style.display = "none"),
      this.fileViewerUIMap.size === 1 &&
        (this.fileViewerPlaceholder.style.display = "flex");
  }
  renderFileViewerItem(e) {
    const t = this.fileViewerOriginalRow.cloneNode(!0);
    (t.dataset.id = e.id),
      (t.style.display = "grid"),
      (t.querySelector("[data-type]").dataset.id = e.type),
      (t.querySelector("[data-name]").textContent = e.name),
      (t.querySelector("[data-size]").textContent = this.getFileFormatString(
        e.size,
      ));
    const r = t.querySelector("[data-status]");
    console.log("newRowEl:", t),
      this.fileViewerList.insertAdjacentElement("beforeend", t),
      this.fileViewerUIMap.set(e.id, t),
      this.togglePlaceholderUI();
    const i = t.querySelector("[data-trash]");
    (i.dataset.id = e.id),
      i.addEventListener("click", (s) => {
        this.deleteFileViewerItem(s.target.dataset.id);
      }),
      console.log("newRowEl:", t);
  }
  deleteFileViewerItem(e) {
    const t = this.fileViewerUIMap.get(e);
    console.log("removableEl:", t),
      this.deleteFileState(e),
      this.fileViewerList.removeChild(t),
      this.togglePlaceholderUI();
  }
  addVariantProps(e) {
    console.log("id:", e),
      (this.hiddenInput = this.productForm?.querySelector(
        "input[name='properties[__file_id]']",
      )),
      this.hiddenInput
        ? (this.hiddenInput.value += `,${e}`)
        : ((this.hiddenInput = document.createElement("input")),
          (this.hiddenInput.type = "hidden"),
          (this.hiddenInput.name = "properties[__file_id]"),
          (this.hiddenInput.value = e),
          this.productForm.appendChild(this.hiddenInput));
  }
  deleteVariantProps(e) {
    if (this.hiddenInput) {
      const t = this.hiddenInput.value
        .split(",")
        .filter((r) => r !== e)
        .join(",");
      (this.hiddenInput.value = t), t || this.hiddenInput.remove();
    }
  }
  resetDragUIState() {
    this.dropzoneForm.removeAttribute("data-status"),
      this.dropzoneForm.removeAttribute("data-drag"),
      this.dropzoneText.removeAttribute("data-status");
  }
  async getMerchantSettings() {
    try {
      const e = await fetch(`${this.SHOPIFY_APP_PROXY_URL}/merchant`, {
        method: "GET",
      });
      if (!e.ok) throw new Error(`Failed to fetch settings: ${e.statusText}`);
      const t = await e.json();
      (this.VALID_FILE_TYPES = t.fileTypeMap || []),
        (this.MAX_FILE_SIZE = t.maxFileSize || 20971520),
        (this.MAX_REQUEST_SIZE = t.maxRequestSize || 20971520);
    } catch (e) {
      return console.error("getMerchantSettings()", e), null;
    }
  }
  async postFiles(e) {
    this.errorMessages = [];
    const t = e.filter((i) => this.validateFile(i)),
      r = new FormData();
    t.forEach((i) => {
      const s = crypto.randomUUID();
      this.addFileState(s, i),
        this.fileNameSet.add(i.name),
        r.append("file_uuid", s),
        r.append("files", i);
    });
    try {
      const i = await fetch(`${this.SHOPIFY_APP_PROXY_URL}/file`, {
        method: "POST",
        redirect: "manual",
        body: r,
      });
      if (i.ok) {
        const s = await i.json();
        console.log("data.files:", s.files),
          s.files.forEach(({ id: o, status: l }) => {
            this.updateFileStatus(o, l),
              this.addVariantProps(o),
              this.renderFileViewerItem(this.fileStateObj[o]);
          });
      } else
        throw new Error(
          `Upload failed with status: ${i.status}, and message: ${i.statusText}`,
        );
    } catch (i) {
      console.error("postFiles():", i);
    }
  }
  async deleteFiles(e) {}
  initEventListeners() {
    this.dropzoneForm.addEventListener(
      "dragenter",
      this.handleDragEnter.bind(this),
    ),
      this.dropzoneForm.addEventListener("dragover", (e) => e.preventDefault()),
      this.dropzoneForm.addEventListener(
        "dragleave",
        this.handleDragLeave.bind(this),
      ),
      this.dropzoneForm.addEventListener("drop", this.handleDrop.bind(this)),
      this.dropzoneSelectBtn.addEventListener("click", (e) => {
        e.preventDefault(), this.dropzoneFileInput.click();
      }),
      this.dropzoneFileInput.addEventListener("change", (e) => {
        const t = Array.from(e.target.files);
        this.postFiles(t);
      });
  }
  handleDragEnter(e) {
    e.preventDefault();
    for (const t of e.dataTransfer.items)
      this.validateFile(t)
        ? (console.log("item:", t),
          this.dropzoneForm.setAttribute("data-status", "valid"),
          this.dropzoneText.setAttribute("data-status", "valid"))
        : (this.dropzoneForm.setAttribute("data-status", "invalid"),
          this.dropzoneText.setAttribute("data-status", "invalid")),
        this.dropzoneForm.setAttribute("data-drag", "dragging");
    console.log("this.dropzoneForm:", this.dropzoneForm);
  }
  handleDragLeave(e) {
    e.preventDefault(),
      this.resetDragUIState(),
      console.log("this.dropzoneForm:", this.dropzoneForm);
  }
  handleDrop(e) {
    e.preventDefault(),
      e.stopPropagation(),
      this.resetDragUIState(),
      this.postFiles(Array.from(e.dataTransfer.files));
  }
}
document.addEventListener("DOMContentLoaded", () => {
  new FileUpload();
});
