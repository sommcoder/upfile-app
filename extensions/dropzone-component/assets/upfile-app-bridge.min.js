"use strict";document.addEventListener("DOMContentLoaded",initUpfile),document.addEventListener("shopify:section:load",initUpfile),console.log("VERSION 5");class UpfileAppBridge{#e;VALID_FILE_TYPES={};MAX_FILE_SIZE=null;MAX_FILE_COUNT=null;MAX_REQUEST_SIZE=null;CART_DRAWER_ENABLED=!1;INJECTION_ROOT_SELECTOR=null;INJECTION_PARENT_SELECTOR=null;INJECTION_POSITION=null;CUSTOM_HTML=null;CUSTOM_CSS=null;CUSTOM_JS=null;fileNameSet=new Set;fileViewerUIMap=new Map;fileStateObj={};totalStateFileSize=0;formData=new FormData;errorMessages=[];constructor(){if(self.location.origin.includes("myshopify.com"))this.#e=`${self.location.origin}/apps/dropzone`;else throw console.error("%c\u26A0\uFE0F UPFILE ERROR: Origin does not contain 'myshopify'!","background: red; color: white; font-weight: bold; padding: 4px 8px; border-radius: 4px;"),new Error("UPFILE ERROR: Origin does not contain 'myshopify'");this.getMerchantSettings(this.#e),this.CART_DRAWER_ENABLED,this.initializeAppBridgeEvents(),self.dispatchEvent(new CustomEvent("upfile:loaded"))}injectShadowRoot(){}injectStylesheet(){}async getMerchantSettings(e){try{const t=await fetch(`${e}/merchant`);if(!t.ok)throw new Error("Failed to fetch merchant settings");const i=await t.json();console.log("settings:",i),this.mountSettings(i)}catch(t){console.error("Could not get merchant settings:",t)}}mountSettings(e){self.upfile.MAX_FILE_SIZE=e.maxFileSize,self.upfile.MAX_FILE_COUNT=e.maxFileCount,self.upfile.MAX_REQUEST_SIZE=e.maxRequestSize,self.upfile.VALID_FILE_TYPES=e.validFileTypes,self.upfile.CART_DRAWER_ENABLED=e.cartDrawerEnabled,self.upfile.INJECTION_ROOT_SELECTOR=e.injectionRootSelector||null,self.upfile.INJECTION_PARENT_SELECTOR=e.injectionParentSelector||null,self.upfile.INJECTION_POSITION=e.injectionPosition||null,self.upfile.CUSTOM_HTML=e.customHTML||null,self.upfile.CUSTOM_CSS=e.customCSS||null,self.upfile.CUSTOM_JS=e.customJS||null}async postFiles(e){try{const t=await fetch(`${window.upfile.#e}/file`,{method:"POST",redirect:"manual",body:e,headers:{"Content-Length":window.upfile.totalStateFileSize.toString()}});if(!t.ok){const i=await t.text();throw new Error(`Upload failed (${t.status}): ${i}`)}return await t.json()}catch(t){return console.error("postFiles():",t),{data:null,error:t.message}}}async deleteFiles(e){try{const t=await fetch(`${window.upfile.#e}/file`,{method:"DELETE",redirect:"manual",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok){const l=await t.text();throw new Error(`Delete failed (${t.status}): ${l}`)}const i=await t.json();return i.length>0&&console.warn("Some files failed to delete:",i),{failed:i}}catch(t){return console.error("deleteFiles():",t),{failed:[],error:t.message}}}addFileState(e,t){self.upfile.fileStateObj[e]={id:e,name:t.name,size:t.size,type:t.type,status:null},self.upfile.fileNameSet.add(t.name),self.upfile.totalStateFileSize+=t.size}updateFileStatus(e,t){if(!Object.hasOwn(self.upfile.fileStateObj,e))return console.error(`File with id: ${e} does not exist in state`),!1;const i=t==="fulfilled"||t==="success"?"success":"failed";self.upfile.fileStateObj[e].status=i;const l=self.upfile.fileViewerUIMap.get(e)?.querySelector("[data-status]");return l&&(l.textContent=i,l.dataset.status=i),!0}deleteFileState(e){const t=self.upfile.fileStateObj[e];self.upfile.totalStateFileSize-=t.size,self.upfile.fileNameSet.delete(t.name),delete self.upfile.fileStateObj[e],self.upfile.fileViewerUIMap.delete(e)}addVariantProps(e){self.upfile.productForm&&(self.upfile.hiddenInput=self.upfile.productForm.querySelector("input[name='properties[__upfile_id]']")),self.upfile.hiddenInput?self.upfile.hiddenInput.value+=`,${e}`:(self.upfile.hiddenInput=document.createElement("input"),self.upfile.hiddenInput.type="hidden",self.upfile.hiddenInput.name="properties[__upfile_id]",self.upfile.hiddenInput.value=e,self.upfile.productForm?.appendChild(self.upfile.hiddenInput))}deleteVariantProps(e){if(self.upfile.hiddenInput){const t=self.upfile.hiddenInput.value.split(",").filter(i=>i!==e).join(",");self.upfile.hiddenInput.value=t}}validateSubmittedFile(e){return self.upfile.errorMessages=[],Object.hasOwn(self.upfile.VALID_FILE_TYPES,e.type)||self.upfile.errorMessages.push(`'${e.name}' is an invalid file type: (${e.type})`),self.upfile.MAX_FILE_SIZE!==null&&self.upfile.MAX_REQUEST_SIZE&&(e.size>self.upfile.MAX_FILE_SIZE&&self.upfile.errorMessages.push(`'${e.name}' exceeds the max size by: ${this.formatToByteStr(e.size-self.upfile.MAX_FILE_SIZE)}`),self.upfile.fileNameSet.has(e.name)&&self.upfile.errorMessages.push(`'${e.name}' is a DUPLICATE file name`),self.upfile.totalStateFileSize+e.size>self.upfile.MAX_REQUEST_SIZE&&self.upfile.errorMessages.push(`'${e.name}' exceeds combined permitted size`)),self.upfile.errorMessages.length===0}validateDraggedFile(e){return Object.hasOwn(self.upfile.VALID_FILE_TYPES,e.type)}formatToByteStr(e){let t=e;const i=["B","KB","MB","GB"];let l=0;for(;t>=1024&&l<i.length-1;)t/=1024,l++;return`${t.toFixed(2)} ${i[l]}`}initializeAppBridgeEvents(){document.addEventListener("cart:updated",e=>{console.log("ev:",e)})}}console.log("UpfileBlock start");class UpfileBlock{dropzoneBlock=null;fileViewerBlock=null;hiddenInput=null;productForm=null;cartRoot=null;dropzoneFileInput=null;dropzoneHelpText=null;dropzoneText=null;dropzoneSelectBtn=null;dropzoneFileSizeTally=null;dropzoneFileSizeMax=null;fileViewerList=null;fileViewerOriginalRow=null;fileViewerTrashIcon=null;fileViewerStatus=null;loadingSpinner=null;fileViewerPlaceholder=null;fileViewerErrorList=null;fileViewerErrorItem=null;constructor(){if(console.log("app block constructing..."),console.log("self.upfile.INJECTION_ROOT_SELECTOR:",self.upfile.INJECTION_ROOT_SELECTOR),self.upfile.CART_DRAWER_ENABLED?this.cartRoot=document.querySelector(self.upfile.INJECTION_ROOT_SELECTOR||document.querySelector('[id*="cart" i]')):this.productForm=document.querySelector('[data-type="add-to-cart-form"]')||document.querySelector('form[action*="/cart/add"]')||document.querySelector('form[action^="/cart"]')||null,this.insertAppBlock(this.cartRoot||this.productForm),this.dropzoneBlock=document.querySelector("#upfile__dropzone"),this.fileViewerBlock=document.getElementById("upfile__fileviewer"),this.dropzoneBlock&&this.fileViewerBlock&&self.upfile.productForm){if(this.dropzoneFileInput=this.dropzoneBlock.querySelector("#upfile__dropzone_manual_file_input"),this.dropzoneHelpText=this.dropzoneBlock.querySelector("#upfile__dropzone_help_text"),this.dropzoneText=this.dropzoneBlock.querySelector("#upfile__dropzone_text"),console.log("this.dropzoneText:",this.dropzoneText),this.dropzoneSelectBtn=this.dropzoneBlock.querySelector("#upfile__dropzone_select_file_btn"),this.dropzoneFileSizeTally=this.dropzoneBlock.querySelector("#upfile__dropzone_file_size_tally"),this.dropzoneFileSizeMax=this.dropzoneBlock.querySelector("#upfile__dropzone_file_size_max"),this.fileViewerList=this.fileViewerBlock.querySelector("#upfile__fileviewer_item_list"),!this.fileViewerList)return;this.fileViewerOriginalRow=this.fileViewerList.querySelector(".upfile__fileviewer_item_row"),this.fileViewerTrashIcon=this.fileViewerList?.querySelector(".upfile__fileviewer_trash_icon"),this.fileViewerStatus=this.fileViewerList.querySelector(".upfile__fileviewer_item_status"),this.loadingSpinner=this.fileViewerList.querySelector(".upfile__spinner"),this.fileViewerPlaceholder=this.fileViewerList.querySelector("#upfile__fileviewer_placeholder"),this.fileViewerErrorList=this.fileViewerBlock.querySelector("#upfile__fileviewer_error_list"),this.fileViewerErrorItem=this.fileViewerBlock.querySelector(".upfile__fileviewer_error_item"),this.initEventListeners(),this.isInAppBrowser()}else{const e=this.dropzoneBlock?.querySelector("#upfile__dropzone_missing_block_notice");if(e instanceof HTMLElement){if(e.style.display="flex",!this.dropzoneBlock)return;const i=this.dropzoneBlock.firstElementChild;i instanceof HTMLElement&&(i.style.display="none")}const t=this.fileViewerBlock?.querySelector("#upfile__dropzone_missing_block_notice");if(t instanceof HTMLElement){t.style.display="flex";const i=this.fileViewerBlock?.firstElementChild;i instanceof HTMLElement&&(i.style.display="none")}}}insertAppBlock(e){e&&(console.log("element:",e),e.insertAdjacentHTML(self.upfile.INJECTION_POSITION,self.upfile.CUSTOM_HTML))}isInAppBrowser(){const e=navigator.userAgent||navigator.vendor;return/FBAN|FBAV|Instagram|Line|Twitter|Snapchat|TikTok/i.test(e)}openInDefaultBrowser(){const e=window.location.href,t=window.open(e,"_blank");(!t||t.closed||typeof t.closed>"u")&&alert("Please open this page in your browser for the best experience.")}togglePlaceholderUI(){this.fileViewerPlaceholder&&(self.upfile.fileViewerUIMap.size===0?this.fileViewerPlaceholder.style.display="flex":self.upfile.fileViewerUIMap.size===1&&(this.fileViewerPlaceholder.style.display="none"))}renderFileViewerItem(e){let t=this.fileViewerOriginalRow?.cloneNode(!0);if(console.log("START newRowEl:",t),!t||t===null)return;t.dataset.id=e.id;const i=t.querySelector("[data-name]");i&&(i.textContent=e.name);const l=t.querySelector("[data-size]");l&&(l.textContent=self.upfile.formatToByteStr(e.size));const r=t.querySelector("[data-trash]");r&&(r.dataset.id=e.id,r.addEventListener("click",s=>{const o=s.target.dataset.id;o&&this.handleFileDelete(o)})),console.log("END newRowEl:",t),this.fileViewerList?.appendChild(t),t.style.display="grid",t.style.opacity="1",self.upfile.fileViewerUIMap.set(e.id,t),this.togglePlaceholderUI(),this.hideLoadingSpinner(e.id)}deleteFileViewerItem(e){if(!this.fileViewerList)return;const t=self.upfile.fileViewerUIMap.get(e);self.upfile.fileViewerUIMap.delete(e),this.fileViewerList.removeChild(t)}updateTallyElementText(){this.dropzoneFileSizeTally&&(this.dropzoneFileSizeTally.textContent=self.upfile.formatToByteStr(self.upfile.totalStateFileSize))}resetDragUI(){!this.dropzoneSelectBtn||!this.dropzoneBlock||!this.dropzoneText||(this.dropzoneSelectBtn.style.display="flex",this.dropzoneBlock.removeAttribute("data-status"),this.dropzoneBlock.removeAttribute("data-drag"),this.dropzoneText.style.display="none",this.dropzoneText.removeAttribute("data-status"))}hideLoadingSpinner(e){if(!this.fileViewerList)return;const t=this.fileViewerList.querySelector(`[data-id="${e}"]`);t&&(t.style.display="none")}renderLoadingSpinner(e){if(!this.loadingSpinner)return;const t=this.loadingSpinner.cloneNode(!0),i=e.parentNode,l=e.nextSibling;if(!(!i||!l))return e.remove(),i.insertBefore(t,l),function(){t.remove(),i.insertBefore(e,l)}}renderFileViewerSpinners(e,t){if(!this.fileViewerOriginalRow||!this.fileViewerList)return;const i=this.fileViewerOriginalRow.cloneNode(!0);i.id=e,i.classList.remove("hidden");const l=i.querySelector(".upfile__fileviewer_item_name"),r=i.querySelector(".upfile__fileviewer_item_status");l&&(l.textContent=self.upfile.fileStateObj[e].name),r&&(r.textContent="uploading...",r.setAttribute("data-status","uploading"));const s=i.querySelector(".upfile__fileviewer_trash_icon");s&&s.addEventListener("click",()=>{this.fileViewerList?.removeChild(i),self.upfile.deleteFileState(e),self.upfile.deleteVariantProps(e),this.togglePlaceholderUI(),this.updateSizeTallyUI()}),this.fileViewerList.insertBefore(i,this.fileViewerPlaceholder),self.upfile.fileViewerUIMap.set(e,i)}renderErrorMessages(e){!this.fileViewerErrorList||!this.fileViewerErrorItem||(this.fileViewerErrorList.innerHTML="",e.forEach(t=>{if(!this.fileViewerErrorItem)return;const i=this.fileViewerErrorItem.cloneNode(!0);i.classList.remove("hidden"),i.textContent=t,this.fileViewerErrorList?.appendChild(i)}),this.fileViewerErrorList.style.display="block")}updateSizeTallyUI(){this.dropzoneFileSizeTally&&(this.dropzoneFileSizeTally.textContent=self.upfile.formatToByteStr(self.upfile.totalStateFileSize))}resetErrorMessageList(){self.upfile.errorMessages=[],this.fileViewerErrorList&&(this.fileViewerErrorList.innerHTML="")}initEventListeners(){this.dropzoneBlock?.addEventListener("dragenter",this.handleDragEnter.bind(this)),this.dropzoneBlock?.addEventListener("dragover",e=>{e.preventDefault()}),this.dropzoneBlock?.addEventListener("dragleave",this.handleDragLeave.bind(this)),this.dropzoneBlock?.addEventListener("drop",this.handleDrop.bind(this)),this.dropzoneSelectBtn?.addEventListener("click",e=>{e.preventDefault(),this.dropzoneFileInput?.click()}),this.dropzoneFileInput?.addEventListener("change",e=>{const t=e.target,i=Array.from(t.files?.length?t.files:[]);this.prepareForPost(i),self.upfile.postFiles(self.upfile.formData)})}prepareForPost(e){this.resetErrorMessageList();const t=e.filter(i=>self.upfile.validateSubmittedFile(i));if(self.upfile.errorMessages.length>0||t.length===0)return self.upfile.errorMessages;Array.from(t).forEach((i,l)=>{if(!self.upfile.validateSubmittedFile(i)){this.renderErrorMessages(self.upfile.errorMessages);return}const r=crypto.randomUUID();self.upfile.addFileState(r,i),self.upfile.formData.append("file_uuid",r),self.upfile.formData.append("files",i),this.renderFileViewerSpinners(r,l)})}handleFileResponse(e,t){this.renderFileViewerItem(self.upfile.fileStateObj[e.id]),self.upfile.updateFileStatus(e.id,t)&&(self.upfile.addVariantProps(e.id),this.updateTallyElementText())}handleFileDelete(e){self.upfile.deleteVariantProps(e),this.deleteFileViewerItem(e),self.upfile.deleteFileState(e),this.updateTallyElementText(),self.upfile.errorMessages=[],this.togglePlaceholderUI(),self.upfile.deleteFiles([e])}handleDragEnter(e){if(e.preventDefault(),this.dropzoneBlock?.setAttribute("data-drag","dragging"),!this.dropzoneSelectBtn||!this.dropzoneText)return;this.dropzoneSelectBtn.style.display="none";const t=e.dataTransfer?.items;if(!t)return;const i=t.length;let l="";for(const r of t){const s=self.upfile.validateDraggedFile(r);this.dropzoneBlock?.setAttribute("data-status",s?"valid":"invalid"),this.dropzoneText?.setAttribute("data-status",s?"valid":"invalid"),l=i>1?this.dropzoneText.dataset[s?"validTextPlural":"invalidTextPlural"]:this.dropzoneText.dataset[s?"validTextSingular":"invalidTextSingular"],this.dropzoneText.textContent=l,this.dropzoneText.style.display="flex",console.log("this.dropzoneText.textContent:",this.dropzoneText?.textContent)}}handleDragLeave(e){e.preventDefault(),this.resetDragUI()}async handleDrop(e){e.preventDefault(),e.stopPropagation(),this.resetDragUI();const t=e.dataTransfer?.files;if(!t)return;this.prepareForPost(Array.from(t));const{data:i,error:l}=await self.upfile.postFiles(self.upfile.formData);if(l||!i){console.warn("Upload error:",l);return}i.forEach(({value:r,status:s})=>{this.handleFileResponse(r,s)})}}function initUpfile(){console.log("CHECK 1 INIT"),self.upfile||(self.upfile=new UpfileAppBridge,console.log("Upfile created and mounted")),console.log("self.upfile:",self.upfile),new UpfileBlock}
